[{"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/styles.ts":"1","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/NewItemForm.tsx":"2","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/Column.tsx":"3","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/utils/useFocus.ts":"4","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/index.tsx":"5","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/AppStateContext.tsx":"6","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/Card.tsx":"7","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/reportWebVitals.ts":"8","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/utils/arrayUtils.ts":"9","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/App.tsx":"10"},{"size":1678,"mtime":1606822972347,"results":"11","hashOfConfig":"12"},{"size":827,"mtime":1606825123387,"results":"13","hashOfConfig":"12"},{"size":806,"mtime":1607019993730,"results":"14","hashOfConfig":"12"},{"size":197,"mtime":1606824850481,"results":"15","hashOfConfig":"12"},{"size":556,"mtime":1606935804025,"results":"16","hashOfConfig":"12"},{"size":2334,"mtime":1607019144933,"results":"17","hashOfConfig":"12"},{"size":226,"mtime":1607020023143,"results":"18","hashOfConfig":"12"},{"size":425,"mtime":1606768537472,"results":"19","hashOfConfig":"12"},{"size":391,"mtime":1607018892506,"results":"20","hashOfConfig":"12"},{"size":607,"mtime":1607019850106,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"il8bmv",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/styles.ts",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/NewItemForm.tsx",["43"],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/Column.tsx",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/utils/useFocus.ts",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/index.tsx",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/AppStateContext.tsx",["44"],"import { createContext, useReducer, useContext } from 'react';\nimport { nanoid } from 'nanoid';\nimport { overrideItemAtIndex, findItemIndexById } from './utils/arrayUtils';\nimport { act } from 'react-dom/test-utils';\n\ninterface Task {\n  id: string;\n  text: string;\n}\n\ninterface List {\n  id: string;\n  text: string;\n  tasks: Task[];\n}\n\nexport interface AppState {\n  lists: List[];\n}\n\ninterface AppStateContextProps {\n  state: AppState;\n  dispatch: React.Dispatch<Action>;\n}\n\ntype Action =\n  | {\n      type: 'ADD_LIST';\n      payload: string;\n    }\n  | {\n      type: 'ADD_TASK';\n      payload: { text: string; listId: string };\n    };\n\nconst AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n);\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n    case 'ADD_LIST': {\n      return {\n        ...state,\n        lists: [\n          ...state.lists,\n          { id: nanoid(), text: action.payload, tasks: [] },\n        ],\n      };\n    }\n\n    case 'ADD_TASK': {\n      const targetListIndex = findItemIndexById(\n        state.lists,\n        action.payload.listId\n      );\n\n      const targetList = state.lists[targetListIndex];\n\n      const updateTargetList = {\n        ...targetList,\n        tasks: [\n          ...targetList.tasks,\n          { id: nanoid(), text: action.payload.text },\n        ],\n      };\n\n      return {\n        ...state,\n        lists: overrideItemAtIndex(\n          state.lists,\n          updateTargetList,\n          targetListIndex\n        ),\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nconst appData: AppState = {\n  lists: [\n    {\n      id: '0',\n      text: 'To Do',\n      tasks: [{ id: 'c0', text: 'Generate app scaffold' }],\n    },\n    {\n      id: '1',\n      text: 'In Progress',\n      tasks: [{ id: 'c2', text: 'Learn Typescript' }],\n    },\n    {\n      id: '2',\n      text: 'Done',\n      tasks: [{ id: 'c3', text: 'Begin to use static typing' }],\n    },\n  ],\n};\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};\n","/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/Card.tsx",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/reportWebVitals.ts",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/utils/arrayUtils.ts",[],"/home/marina/Documents/Newline.co - Fullstack React with Typescript/my-code/trello-clone/src/App.tsx",[],{"ruleId":"45","severity":1,"message":"46","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":12},{"ruleId":"45","severity":1,"message":"49","line":4,"column":10,"nodeType":"47","messageId":"48","endLine":4,"endColumn":13},"@typescript-eslint/no-unused-vars","'on' is defined but never used.","Identifier","unusedVar","'act' is defined but never used."]